(window.webpackJsonp=window.webpackJsonp||[]).push([[459],{1033:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"배열"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#배열"}},[t._v("#")]),t._v(" 배열")]),t._v(" "),s("p",[t._v("스위프트 컬렉션 타입에 해당하는 자료형들은 배열, 딕셔너리, "),s("code",[t._v("Set")]),t._v("가 있다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numsArray1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numsArray2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("배열에는 한 가지 타입의 값들만 담을 수 있다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 빈 배열 생성법")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 배열 생성자 함수")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 배열 생성자 함수")]),t._v("\n")])])]),s("h3",{attrs:{id:"배열-메서드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#배열-메서드"}},[t._v("#")]),t._v(" 배열 메서드")]),t._v(" "),s("p",[s("code",[t._v("let arr: [Int] = [1,2,3]")]),t._v(" 기준으로 예시를 든다.")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("arr.count")]),t._v(" : 배열요소 개수")]),t._v(" "),s("li",[s("code",[t._v("arr.isEmpty")]),t._v(" : 배열이 빈 배열인지 확인")]),t._v(" "),s("li",[s("code",[t._v("arr.contains(값)")]),t._v(" : 전달된 값이 배열에 존재하는지")]),t._v(" "),s("li",[s("code",[t._v("arr.randomElement()")]),t._v(" : 배열 중 랜덤요소 반환")]),t._v(" "),s("li",[s("code",[t._v("arr.first")]),t._v(" : 첫 번째 배열 요소에 대한 옵셔널 리턴")]),t._v(" "),s("li",[s("code",[t._v("arr.last")]),t._v(" : 마지막 배열 요소에 대한 옵셔널 리턴")]),t._v(" "),s("li",[s("code",[t._v("arr.startIndex")]),t._v(": 배열 시작 인덱스값 반환")]),t._v(" "),s("li",[s("code",[t._v("arr.endIndex")]),t._v(" : 메모리 위치상 가장 마지막을 반환 (인덱싱을 위해서는 endIndex-1에 접근해야됨)")]),t._v(" "),s("li",[s("code",[t._v("arr.firstIndex(of: 값)")]),t._v(": 전달된 값이 배열에 있는 가장 첫번째 인덱스값")]),t._v(" "),s("li",[s("code",[t._v("arr.lastIndex(of: 값)")]),t._v(": 전달된 값이 배열에 있는 가장 마지막 인덱스값")]),t._v(" "),s("li",[s("code",[t._v("arr.insert(값, at: 인덱스)")]),t._v(": 인덱스에 값 삽입")]),t._v(" "),s("li",[s("code",[t._v("arr.insert(contentsOf: [요소들], at: 인덱스)")]),t._v(": contentsOf에 전달된 배열들 삽입")]),t._v(" "),s("li",[s("code",[t._v("arr[0..1] = [0,1]")]),t._v(": 0~1까지의 요소를 우항에 전달된 값으로 교체")]),t._v(" "),s("li",[s("code",[t._v("arr.replaceSubrange(인덱스Range, with: [요소들])")]),t._v(": Range인덱스 범위에 있는 컬렉션 요소들을 with에 전달된 요소들로 교체")]),t._v(" "),s("li",[s("code",[t._v("arr.remove(at: 인덱스)")])]),t._v(" "),s("li",[s("code",[t._v("arr.removeSubrange(인덱스 Range)")])]),t._v(" "),s("li",[s("code",[t._v("arr.removeFirst(개수)")]),t._v(": 0번째부터 전달된 개수만큼 지우기")]),t._v(" "),s("li",[s("code",[t._v("arr.removeLast(개수)")]),t._v(": 마지막인덱스부터 전달된 개수만큼")]),t._v(" "),s("li",[s("code",[t._v("arr.removeAll()")]),t._v(": 전체 지우기")]),t._v(" "),s("li",[s("code",[t._v("arr.removeAll(keepingCapacity: true)")]),t._v(": 메모리 공간은 유지하고 값만 날림 (재할당시 성능을 위함)")]),t._v(" "),s("li",[s("code",[t._v("arr.sort()")]),t._v(": 오름차순 정렬, mutable함.")]),t._v(" "),s("li",[s("code",[t._v("arr.sorted()")]),t._v(": 값을 복사하여 오름차순 정렬된 새 배열을 리턴")]),t._v(" "),s("li",[s("code",[t._v("arr.reverse()")]),t._v(", "),s("code",[t._v("arr.reversed()")]),t._v(" - 배열 역순정렬")]),t._v(" "),s("li",[s("code",[t._v("arr.shuffle()")]),t._v(", "),s("code",[t._v("arr.shuffled()")]),t._v(" - 배열 섞기")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("enumerated()")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" tuple "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tuple"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 네임드 튜플이 출력된다.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 각 튜플은 (offset: 인덱스, element: 요소값)의 형태를 갖는다.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 구조분해")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"딕셔너리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#딕셔너리"}},[t._v("#")]),t._v(" 딕셔너리")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jun"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Age"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jun"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Age"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("딕셔너리의 모든 키값들은 서로 같은 타입이어야하고, 밸류도 마찬가지이다.")]),t._v(" "),s("p",[t._v("딕셔너리의 키값은 해셔블(Hashable)해야한다. 타입이 해셔블하다는 의미는 해당 타입을 해시 함수에 대한 인풋값으로 사용 가능하다는 의미이다.")]),t._v(" "),s("p",[t._v("스위프트의 기본 타입들은 모두 해셔블하다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" emptyDict1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" emptyDict2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dictionary")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" emptyDict3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"딕셔너리-메서드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#딕셔너리-메서드"}},[t._v("#")]),t._v(" 딕셔너리 메서드")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("dict.count")]),t._v(" : 딕셔너리 원소 개수")]),t._v(" "),s("li",[s("code",[t._v("dict.isEmpty")]),t._v(": 딕셔너리가 비어있는지")]),t._v(" "),s("li",[s("code",[t._v("dict.randomElement()")]),t._v(": 랜덤 요소를 "),s("strong",[t._v("옵셔널 네임드 튜플로")]),t._v(" 반환")]),t._v(" "),s("li",[s("code",[t._v("dict.keys")]),t._v(", "),s("code",[t._v("dict.values")]),t._v(" : 딕셔너리 키 및 밸류들을 배열로 반환")]),t._v(" "),s("li",[s("code",[t._v("dict.updateValue(값, forKey:키값)")]),t._v(" "),s("ul",[s("li",[t._v("forKey에 전달된 키값에 대해 밸류가 존재하면 해당 밸류를 삭제하고 업데이트")]),t._v(" "),s("li",[t._v("updateValue 함수의 리턴값으로 수정 전 값이 반환된다.")]),t._v(" "),s("li",[t._v("forKey에 전달된 키값에 대해 밸류가 없었다면 값을 추가하고 함수의 리턴값으로는 nil을 리턴")])])]),t._v(" "),s("li",[s("code",[t._v("dict[키] = nil")]),t._v(" 키값에 대한 요소 삭제, 존재하지 않는 키값에 대해 삭제를 시도해도 에러는 나지 않는다.")]),t._v(" "),s("li",[s("code",[t._v("dict.removeValue(forKey: 키)")]),t._v(": 키값에 대해 밸류를 지우고 지워진 값을 반환, 밸류가 없는 키값이었다면 "),s("code",[t._v("nil")]),t._v(" 반환")])]),t._v(" "),s("p",[t._v("딕셔너리간의 비교연산이 가능하다.")]),t._v(" "),s("h2",{attrs:{id:"집합-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#집합-set"}},[t._v("#")]),t._v(" 집합(Set)")]),t._v(" "),s("p",[t._v("대괄호로 관리하며 배열과 구분이 되지 않기 때문에 명시적 타입 선언을 해야한다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("집합 자료구조이므로 산술에서 사용하는 집합간 연산을 동일하게 지원한다. (차집합 등)")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("copy-on-write 최적화")]),t._v(" "),s("p",[t._v("컬렉션을 서브스크립트 또는 Range를 통해 부분의 값을 뽑아왔을때 해당 값을 변수에 바인딩 하더라도 값의 변화가 없다면 이는 새로운 메모리를 할당받는 것이 아니라 기존 컬렉션의 메모리를 공유하며 사용한다.")]),t._v(" "),s("p",[t._v("스위프트 자체적으로 최적화하고 있음.")])]),t._v(" "),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8/dashboard",target:"_blank",rel:"noopener noreferrer"}},[t._v("인프런 - 앨런 swift 문법 마스터 스쿨"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);
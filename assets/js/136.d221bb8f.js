(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{666:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"재귀란"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#재귀란"}},[t._v("#")]),t._v(" 재귀란?")]),t._v(" "),s("p",[t._v("재귀함수는 자기 자신을 호출하는 함수를 의미합니다.")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(1234,3214,5234,63546) 이 숫자 목록 중 홀수를 찾아보세요.\n")])])]),s("p",[t._v("위 문제에 대해 재귀적 사고를 적용하면 선형적으로 모든 숫자 하나하나 홀/짝 판단을 하지 않습니다. 모든 목록 중 첫 번째 숫자가 홀수인지 판단하고, 그 다음엔 1234를 제외한 나머지 세개중 첫 번째 숫자가 홀수인지 판단하며 최종적으로 텅 빈 값이 전달되면 재귀적 사고를 멈추게 되는 형태입니다.")]),t._v(" "),s("p",[t._v("재귀를 끝마치는 순간의 케이스를 "),s("strong",[t._v("탈출조건 (base case)라고 하며")]),t._v(" 해당 조건이 재귀에서는 핵심이 됩니다.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("JavaScript 내장 메서드")]),t._v(" "),s("p",[t._v("자바스크립트의 내장 메서드 중 몇가지는 재귀적 호출을 기반으로 이루어집니다.")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("JSON.parse")]),t._v(" / "),s("code",[t._v("JSON.stringify")])]),t._v(" "),s("li",[t._v("DOM 순회 메서드들 ("),s("code",[t._v("document.getElementById")]),t._v(" ..)")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("크롬 JavaScript 디버거")]),t._v(" "),s("p",[t._v("구글 크롬 개발자도구의 "),s("code",[t._v("Source")]),t._v("탭에 코드 작성을 한 뒤 코드 왼쪽편의 라인넘버를 클릭하면 중단점(break point)을 지정할 수 있습니다. 이후 함수를 실행하면 중단점부터 디버깅을 시작하며 F9를 통해 크롬 내부 동작 코드는 건너뛸 수 있습니다.")])]),t._v(" "),s("p",[t._v("재귀함수 정의 시 주의할 점은 다음과 같습니다.")]),t._v(" "),s("ol",[s("li",[t._v("재귀함수는 반드시 탈출조건을 먼저 생각하고 정의해야합니다.")]),t._v(" "),s("li",[t._v("값에 대한 연산 시 탈출조건에 올바른값을 리턴해야합니다.")])]),t._v(" "),s("h2",{attrs:{id:"헬퍼-메서드-재귀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#헬퍼-메서드-재귀"}},[t._v("#")]),t._v(" 헬퍼 메서드 재귀")]),t._v(" "),s("p",[t._v("헬퍼 메서드는 함수 내에서 호출되는 재귀함수입니다. 주어진 배열 내에서 홀수 값들을 수집하는 함수를 정의한다고 가정해봅시다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collectOdds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 재귀함수를 함수 내부에서 정의")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("helperInput")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("helperInput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" checkValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" helperInput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            checkValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("checkValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("helperInput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return helper(helperInput.slice(1)); -> [0]인덱스 값을 제외하고")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 나머지 모든 원소들을 subArray로 반환")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 정의한 재귀함수를 함수 내부에서 호출")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("helper")]),t._v("함수 내에서는 자신보다 한 단계 밖의 "),s("code",[t._v("collectOdds")]),t._v(" 함수 블록의 "),s("code",[t._v("result")]),t._v("에 접근하여 값을 변경할 수 있습니다.")]),t._v(" "),s("p",[t._v("재귀함수를 헬퍼 메서드로 정의하여 사용하게 되면 헬퍼메서드 외부에서 재귀함수의 결과값에 대한 데이터를 저장하여 활용할 수 있다는 점이 편리합니다.")]),t._v(" "),s("p",[t._v("위 코드를 순수 재귀함수로 구현하려면 홀수값 판별 후에 해당 홀수값을 어딘가에 저장해야하는데 그러한 부분이 직관적으로 생각나지 않습니다.")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collectOdds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newArr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newArr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        newArr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    newArr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newArr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collectOdds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newArr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[s("code",[t._v("[1,2,3,4,5]")]),t._v("배열이 전달됩니다.")]),t._v(" "),s("li",[s("code",[t._v("arr[0]")]),t._v("이 1로 홀수이므로 newArr에 1값이 푸시됩니다.")]),t._v(" "),s("li",[s("code",[t._v("newArr")]),t._v("에 1이 있는 상태로 배열 하나를 더 붙이는데, 이 배열은 "),s("code",[t._v("collectOdds(arr.slice(1))")]),t._v("입니다.")]),t._v(" "),s("li",[t._v("재귀적으로 호출되어 "),s("code",[t._v("[2,3,4,5]")]),t._v("에 대해 홀수를 다시 판별합니다.")]),t._v(" "),s("li",[s("code",[t._v("arr[0]")]),t._v("인 2값이 짝수이므로 푸시하지 않고 빈 배열에 "),s("code",[t._v("collectOdds([3,4,5])")]),t._v("를 concat합니다.")]),t._v(" "),s("li",[t._v("재귀적으로 쭉 이어지다가 탈출조건을 만납니다.")]),t._v(" "),s("li",[t._v("다시 역으로 배열들을 리턴해가며 newArr에 "),s("code",[t._v("[5]")]),t._v("가 있던 상황에 탈출조건으로 반환된 빈 배열을 concat합니다.")]),t._v(" "),s("li",[t._v("재귀 호출 단계에 있던 "),s("code",[t._v("[3]")]),t._v("에서 "),s("code",[t._v("[5]")]),t._v("를 concat하여 "),s("code",[t._v("[3,5]")]),t._v("가 됩니다.")]),t._v(" "),s("li",[t._v("마지막에 "),s("code",[t._v("[1]")]),t._v("로만 있던 newArr에 "),s("code",[t._v("[3,5]")]),t._v("를 concat하며 "),s("code",[t._v("[1,3,5]")]),t._v("가 리턴됩니다.")])]),t._v(" "),s("p",[t._v("헬퍼 메서드 사용 없이 순수재귀에 데이터 변경 및 저장이 필요할때 "),s("code",[t._v("spread")]),t._v(", "),s("code",[t._v("slice")]),t._v(", "),s("code",[t._v("concat")]),t._v(" 등의 연산자를 활용하면 좋습니다.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("재귀함수 작성 팁")]),t._v(" "),s("ol",[s("li",[t._v("함수에 대한 형태를 (파라미터, 계산 범위) 명확히 정의한다.")]),t._v(" "),s("li",[t._v("모든 재귀함수는 반복문만으로 구현할 수 있다.")]),t._v(" "),s("li",[t._v("재귀는 반복문 구현에 비해 코드가 간결하지만 함수 호출로 인한 메모리/시간에서 손실이 발생한다.")]),t._v(" "),s("li",[t._v("자기 자신을 리턴하는 방식이 비효율적일 수 있다. "),s("code",[t._v("return func(n) + func(n-1);")])]),t._v(" "),s("li",[t._v("절차지향적 사고가 아닌 귀납적 사고로 접근한다.\n"),s("ol",[s("li",[t._v("n=1일때에 대해 정의")]),t._v(" "),s("li",[t._v("func(k)일때에 대해 정의")]),t._v(" "),s("li",[t._v("func(k+1)에서도 성립하는지 증명")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);
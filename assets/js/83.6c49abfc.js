(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{327:function(t,s,a){t.exports=a.p+"assets/img/dp.1706b118.jpg"},673:function(t,s,a){"use strict";a.r(s);var n=a(6),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"동적계획법을-사용하는-이유"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#동적계획법을-사용하는-이유"}},[t._v("#")]),t._v(" 동적계획법을 사용하는 이유")]),t._v(" "),s("p",[t._v("알고리즘 풀이를 분할정복 관점으로 접근할 때 관점은 두 가지가 존재한다.")]),t._v(" "),s("ol",[s("li",[t._v("일반적인 재귀적 풀이로 접근할 것인가")]),t._v(" "),s("li",[t._v("동적계획법 풀이로 접근할 것인가")])]),t._v(" "),s("p",[t._v("같은 분할정복이어도 수행시간과 메모리 측면에서 동적계획법이 우월한 경우가 많다.")]),t._v(" "),s("p",[s("img",{attrs:{src:a(327),alt:"fibonacci"}})]),t._v(" "),s("p",[t._v("이는 재귀적으로 호출한 경우인데 "),s("code",[t._v("f(3)")]),t._v("과 "),s("code",[t._v("f(2)")]),t._v("가 중복되게 호출되는 문제를 확인할 수 있다.")]),t._v(" "),s("p",[t._v("재귀호출의 문제점 해결을 위해 동적계획법을 활용하면 다음과 같다.")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    F "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        F"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("F"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" F"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" F\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("재귀호출과 가장 큰 차이점은 "),s("strong",[t._v("데이터를 테이블에 저장하는가")]),t._v("이다. 동적계획법의 테이블은 필요한 데이터를 상수시간에 출력할 수 있다는 것이 가장 큰 장점이다.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.geeksforgeeks.org/time-complexity-recursive-fibonacci-program/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Time complexity of recursive Fibonacci Program"),s("OutboundLink")],1),t._v("에 따르면"),s("br"),t._v("\n재귀호출 피보나치 수열의 시간복잡도는 약 O(1.6^n)이고")]),t._v(" "),s("p",[t._v("동적계획법 피보나치 수열의 시간복잡도는 약 O(n)시간이다.")])]),t._v(" "),s("h2",{attrs:{id:"dp-예제-1-계단오르기"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dp-예제-1-계단오르기"}},[t._v("#")]),t._v(" DP 예제 1 - 계단오르기")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("계단은 1칸 또는 2칸씩만 오를 수 있다. 1층부터 n층까지 오르는 데에 발생하는 경우의 수는?\n")])])]),s("p",[t._v("DP도 분할정복이라는 알고리즘 해결방법이 기본적으로 깔려있기 때문에 "),s("strong",[t._v("바닥조건")]),t._v("설정이 가장 우선시 된다.")]),t._v(" "),s("p",[t._v("바닥조건은 "),s("code",[t._v("A[1]=1")]),t._v(", "),s("code",[t._v("A[2]=1")]),t._v("이며 1층에 있을 때와 2층으로 오르는 경우의 수가 바닥조건이 된다. (2층으로 오르는 데에는 계단 한칸만 필요하므로 "),s("code",[t._v("A[2]=1")]),t._v("이 된다.)")]),t._v(" "),s("p",[t._v("이를 바탕으로 점화식을 세우면 "),s("code",[t._v("A[n] = A[n-1] + A[n-2]")]),t._v("가 된다."),s("br"),t._v("\n(n층까지 오르는 경우의 수는 n-1층까지의 경우의 수 + n-2까지의 경우의 수)")]),t._v(" "),s("p",[s("strong",[t._v("피보나치 수열과 같은 알고리즘이므로 코드 구현은 위를 참조")])])])}),[],!1,null,null,null);s.default=r.exports}}]);
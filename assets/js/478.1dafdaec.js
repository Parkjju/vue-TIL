(window.webpackJsonp=window.webpackJsonp||[]).push([[478],{1053:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"유니코드와-문자열"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#유니코드와-문자열"}},[t._v("#")]),t._v(" 유니코드와 문자열")]),t._v(" "),s("p",[t._v("스위프트의 문자열은 각각 인코딩된 유니코드 문자들로 구성되어 있다. 각 문자를 유니코드 UTF-32로 저장하고, 선택에 따라 UTF-8, UTF-16으로도 인코딩 할 수 있다. (메모리 관련 효율을 위해)")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dogString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dog‼🐶"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dogString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utf8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dogString을 utf8체계로 인코딩")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str.utf16")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str.unicodeScalars : UTF-32체계")]),t._v("\n")])])]),s("p",[t._v("UTF-8체계는 HTTP통신할때 일반적으로 사용하는 체계라고 한다.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("유니코드와 한글")]),t._v(" "),s("p",[t._v("한글의 자모를 분리하여 유니코드를 표기하면 해당 자모를 합친 한 글자의 유니코드와 구성이 분명하게 다르다.")]),t._v(" "),s("p",[t._v("하지만 유니코드 체계 내에서는 두 글자를 동일글자로 취급하여 글자수를 셀때 한글자로 취급한다. (일상의 언어로 인식)")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hangul1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u{D55C}"')])]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "한"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"한\\"의 글자수: "')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hangul1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"기모링"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hangul2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u{1112}\\u{1161}\\u{11AB}"')])]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "ㅎ" "ㅏ" "ㄴ"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"ㅎ\\"+\\"ㅏ\\"+\\"ㄴ\\"의 글자수: "')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hangul2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n\nhangul1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hangul2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true!")]),t._v("\n")])])]),s("p",[t._v("위와 유사한 예시로 영단어에 강세가 추가되더라도 글자수에는 변함이 없다.")]),t._v(" "),s("p",[s("strong",[t._v("이러한 유니코드 특성상 스위프트 문자열에서 단순 인덱싱 접근이 불가능하다.")]),t._v(" (한 -> ㅎ + ㅏ + ㄴ)")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("String vs NSString")]),t._v(" "),s("p",[t._v("스위프트 String은 구조체이고 NSString은 클래스이다. NSString은 오브젝티브-C에서 사용하는 타입이며 둘은 거의 유사한 역할을 하기 때문에 서로 타입캐스팅하여 사용하면 된다. "),s("code",[t._v("as")]),t._v("를 통한 타입캐스팅 시 옵셔널로 타입캐스팅 할 필요가 없다."),s("code",[t._v("as?")]),t._v("가 아닌 "),s("code",[t._v("as")]),t._v("로 캐스팅!")]),t._v(" "),s("p",[t._v("위와 같이 서로 문제없이 타입캐스팅 가능한 타입들을 "),s("code",[t._v("Toll-Free Bridged")]),t._v("라고 한다.")]),t._v(" "),s("p",[t._v("글자 길이를 셀때 "),s("code",[t._v("NSString")]),t._v("은 "),s("code",[t._v("length")]),t._v("를, "),s("code",[t._v("String")]),t._v("은 "),s("code",[t._v("count")]),t._v("를 사용하는 등의 차이가 있다. (사실상 거의 String을 사용함)")])]),t._v(" "),s("h2",{attrs:{id:"문자열-입력"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#문자열-입력"}},[t._v("#")]),t._v(" 문자열 입력")]),t._v(" "),s("p",[t._v("문자열 여러줄을 한 공간에서 입력할때 쌍따옴표 세개로 감싸면 된다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" quotation "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\nhello\nmy name\nis\nJun\n"""')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quotation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("이스케이프 시퀀스 종류는 아래와 같다.")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\\0 (null문자)\n\\\\ (백슬레시)\n\\t (탭)\n\\n (줄바꿈 - 개행문자)\n\\r (캐리지 리턴 - 앞줄이동)\n\\\" (쌍따옴표)\n\\' (작은따옴표)\n\\u {유니코드값} (1~8자리의 16진수)\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("raw 스트링")]),t._v(" "),s("p",[t._v("샾(#)으로 감싼 문자열의 내부에서는 이스케이프 시퀀스 등이 모두 문자 그대로 사용된다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('#"Steve"#')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Steve")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// #""Steve""# -> "Steve"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('#"Line 1\\nLine 2"#')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Line 1\\nLine 2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(' ###"'),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Line")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("##"),s("span",{pre:!0,attrs:{class:"token other-directive property"}},[t._v("#nLine")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v('"###\n'),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Line 1 (줄바꿈) Line 2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(' ###"'),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Line")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("##"),s("span",{pre:!0,attrs:{class:"token other-directive property"}},[t._v("#nLine")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v('"###\n'),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Line 1\\n (줄바꿈) Line 2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('#"My name is ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\#(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#')])]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 스트링 인터폴레이션")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"문자열-보간법"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#문자열-보간법"}},[t._v("#")]),t._v(" 문자열 보간법")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dog "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"초코"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("dog")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("위 코드를 실제로 사용해보면 "),s("code",[t._v('Dog(name: "초코", weight: 15.0)')]),t._v("으로 출력된다.")]),t._v(" "),s("p",[t._v("문자열 보간법의 실제 출력 형태를 "),s("strong",[t._v("직접 구현이 가능하다.")])]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomStringConvertible")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("위 프로토콜을 채택하여 "),s("code",[t._v("description")]),t._v(" 계산속성의 get을 구현해주면 문자열 보간법이 위의 형태로 출력된다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomStringConvertible")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"강아지의 이름은 ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("이고, 몸무게는 ")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("weight")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('kg 입니다."')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 강아지의 이름은 초코이고, 몸무게는 15.0kg 입니다.")]),t._v("\n")])])]),s("p",[t._v("문자열 보간법의 "),s("code",[t._v("\\()")]),t._v("는 결국 "),s("code",[t._v("description")]),t._v(" 속성을 읽는 것이다.")]),t._v(" "),s("h2",{attrs:{id:"서브스트링"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#서브스트링"}},[t._v("#")]),t._v(" 서브스트링")]),t._v(" "),s("p",[t._v("스위프트에서 부분 문자열은 "),s("strong",[t._v("String 타입이 아닌 String.SubSequence")]),t._v(" 라는 특별한 타입이다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeting "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("firstIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endIndex\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" beginning"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubSequence")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..<")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("greeting 문자열 내의 "),s("code",[t._v(",")]),t._v("문자가 첫 번째로 등장하는 인덱스 값을 "),s("code",[t._v("firstIndex")]),t._v("라는 메서드를 통해 찾을 수 있다. 닐 코얼레싱 문법을 통해 해당 문자를 찾지 못했다면 "),s("code",[t._v("endIndex")]),t._v("를 반환받고, 이를 "),s("code",[t._v("index")]),t._v(" 변수에 저장한다.")]),t._v(" "),s("p",[t._v("서브스트링 문법을 통해 "),s("code",[t._v("greeting")]),t._v(" 문자열에서 0번째 인덱스부터 "),s("code",[t._v("index")]),t._v(" 변수에 저장된 위치까지 부분 문자열을 뽑아내는데, 이때 뽑아낸 문자열은 "),s("strong",[t._v("String.SubSequence")]),t._v(" 타입이다.")]),t._v(" "),s("p",[t._v("이 타입이 의미하는 바는 서브스트링 대상 문자열인 "),s("code",[t._v("greeting")]),t._v(" 문자열이 저장된 곳의 "),s("strong",[t._v("메모리 주소를 공유하겠다는 의미이다.")]),t._v(" 서브스트링은 새로운 메모리를 사용하지 않는다.")]),t._v(" "),s("p",[s("strong",[t._v("원본 문자열이 달라지게 되는 경우 서브스트링을 위한 메모리 공간을 즉시 새로 할당하여 새롭게 저장한다.")]),t._v(" 서브스트링으로 뽑아낸 부분 문자열을 String타입으로 캐스팅을 하면 새로운 메모리 공간을 할당받는다.")]),t._v(" "),s("h2",{attrs:{id:"문자열-관련-인덱스"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#문자열-관련-인덱스"}},[t._v("#")]),t._v(" 문자열 관련 인덱스")]),t._v(" "),s("p",[t._v("문자열은 각 문자가 String 타입으로 이루어진 배열로 보아도 된다.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token short-argument"}},[t._v("$0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\narray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("joined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 다시 합치기")]),t._v("\n")])])]),s("p",[s("code",[t._v("map")]),t._v(" 고차함수와 내부에 전달되는 클로저를 통해 문자열 전체를 각각 쪼개어 "),s("code",[t._v("String")]),t._v(" 배열로 만든다. (Character타입이 아닌 String타입임에 주의하자)")]),t._v(" "),s("p",[t._v("자바스크립트 join메서드와 유사하게 String타입으로 이루어진 문자열들을 한 문자열로 합쳐줄 수 있다.")]),t._v(" "),s("h2",{attrs:{id:"문자열-메서드-정리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#문자열-메서드-정리"}},[t._v("#")]),t._v(" 문자열 메서드 정리")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("str.randomElement()")]),t._v(" - 문자열에서 랜덤 원소 추출")]),t._v(" "),s("li",[s("code",[t._v("str.shuffled()")]),t._v(" - 문자열을 무작위로 섞은 후 "),s("strong",[t._v("Character 배열로 리턴")])]),t._v(" "),s("li",[s("code",[t._v("str.lowercased()")]),t._v(" - 문자열 전체를 소문자로 바꾼 문자열 리턴 (원본 유지)")]),t._v(" "),s("li",[s("code",[t._v("str.uppercased()")]),t._v(" - 문자열 전체를 대문자로 바꾼 문자열 리턴 (원본 유지)")]),t._v(" "),s("li",[s("code",[t._v("str.capitalized")]),t._v(" - 문자열의 첫 번째 글자를 대문자로 바꾼 문자열 리턴 (원본 유지)")]),t._v(" "),s("li",[s("code",[t._v("str.count")]),t._v(" - 문자열 길이를 반환하는 속성")]),t._v(" "),s("li",[s("code",[t._v("str.isEmpty")]),t._v(" - 빈 문자열인지 판단하는 속성 (문자열 길이가 0인지 체크)")]),t._v(" "),s("li",[s("code",[t._v("str.startIndex")]),t._v(" - 문자열 배열의 시작 인덱스, "),s("code",[t._v("str[str.startIndex]")])]),t._v(" "),s("li",[s("code",[t._v("str.index(str.startIndex, offsetBy: 정수형)")]),t._v(" - startIndex로부터 offsetBy에 전달된 정수값만큼 떨어진 곳의 문자열 인덱스를 뽑아내는 메서드")]),t._v(" "),s("li",[s("code",[t._v("str.index(after: str.startIndex)")]),t._v(" - after에 전달된 인덱스의 바로 다음 인덱스를 얻어낸다.")]),t._v(" "),s("li",[s("code",[t._v("str.index(before: str.beforeIndex)")]),t._v(" - before에 전달된 인덱스의 바로 이전 인덱스를 얻어낸다.")]),t._v(" "),s("li",[s("code",[t._v('str.findIndex(of: "문자")')]),t._v(" - of로 전달된 String타입 문자가 처음 등장하는 곳의 인덱스를 얻어낸다.")]),t._v(" "),s("li",[s("code",[t._v("str.indices")]),t._v(" - 문자열의 각 인덱스들에 대한 값을 갖는 객체. 반복문을 통해 순회하며 각 문자들을 뽑아낼때 사용한다.")]),t._v(" "),s("li",[s("code",[t._v('str.range(of: "부분문자열")')]),t._v(" - 문자열 "),s("code",[t._v("str")]),t._v("의 부분 문자열에 대해 startIndex, endIndex범위를 반환한다. 범위값을 서브스트링에 전달하면 부분문자열 출력이 된다. "),s("strong",[t._v("of에 전달된 문자열 아규먼트가 부분 문자열이 아닌경우 nil을 리턴한다.")]),t._v(" 반환값 타입이 옵셔널이므로 언래핑해줘야함")]),t._v(" "),s("li",[s("code",[t._v("str.distance(from: lower, to: upper)")]),t._v(" - 전달된 인덱스의 시작부터 끝까지 거리에 대해 정수형 값으로 계산하여 리턴해준다.")]),t._v(" "),s("li",[s("code",[t._v("str.insert(newElement: Character,at: 스트링 인덱스)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("str.insert(contentsOf: String, at: 스트링 인덱스)")])])])]),t._v(" "),s("li",[s("code",[t._v("str.replaceSubrange(문자열 range, with: 문자열)")]),t._v(" - "),s("code",[t._v("str.range(of: )")]),t._v("로 뽑아낸 문자열을 대체한다.\n"),s("ul",[s("li",[t._v("옵셔널이므로 if let 바인딩")]),t._v(" "),s("li",[t._v("원본을 변경한다.")])])]),t._v(" "),s("li",[s("code",[t._v("str.replacingOccurrence(of: 문자열, with: 대체 문자열, options: [문자열 탐색 옵션 배열], range: 문자열 탐색 Range)")]),t._v(" "),s("ul",[s("li",[t._v("of에 전달된 문자열이 발견된 경우 with에 전달된 문자열로 대체")]),t._v(" "),s("li",[t._v("원본을 변경하지 않는다.")])])]),t._v(" "),s("li",[s("code",[t._v('str.append("추가할 문자열")')]),t._v(" - 문자열을 추가한다")]),t._v(" "),s("li",[s("code",[t._v("str.remove(at: 문자열 인덱스)")]),t._v(" - 문자 하나 삭제, 원본 변환")]),t._v(" "),s("li",[s("code",[t._v("str.removeSubrange(인덱스 range)")]),t._v(" - 부분 문자열 삭제")]),t._v(" "),s("li",[s("code",[t._v("str.removeAll()")]),t._v(" - 문자열 전체 삭제, 빈 문자열로 대체됨")]),t._v(" "),s("li",[s("code",[t._v("str.removeAll(keepingCapacity: Boolean)")]),t._v(" - 문자열 전체를 삭제하지만 메모리 공간은 유지")]),t._v(" "),s("li",[s("code",[t._v("str.caseInsensitiveCompare(비교할 문자열)")]),t._v(" - 대소문자 무시하여 비교\n"),s("ul",[s("li",[s("strong",[t._v("리턴값은 Boolean이 아니고 열거형임.")]),t._v(" 타입명은 ComparisonResult")]),t._v(" "),s("li",[s("code",[t._v("ComparisonResult.orderedSame")]),t._v(" : 문자열이 동일한 사전상의 순서일때")]),t._v(" "),s("li",[s("code",[t._v("ComparisonResult.orderedAscending")]),t._v(" : 파라미터 문자열이 사전상으로 더 높을때")]),t._v(" "),s("li",[s("code",[t._v("ComparisonResult.orderedDescending")]),t._v(" : 파라미터 문자열이 사전상으로 더 낮을때")])])]),t._v(" "),s("li",[s("code",[t._v("str.compare(문자열, options:[옵션 배열])")]),t._v(" "),s("ul",[s("li",[t._v("메서드에서 options 아규먼트로 배열을 전달할 수 있는 이유는 "),s("code",[t._v("OptionSet")]),t._v(" 프로토콜을 내부적으로 채택했기 때문이다.")])]),t._v(" "),s("ul",[s("li",[t._v(".caseInsensitive // 대소문자 무시하고")]),t._v(" "),s("li",[t._v(".diacriticInsensitive // 발음구별기호 무시하고")]),t._v(" "),s("li",[t._v(".widthInsensitive // 글자 넓이 무시하고")]),t._v(" "),s("li",[t._v(".forcedOrdering // 강제적 오름차순/내림차순 정렬순 (대소문자 무조건 구별 의미)")]),t._v(" "),s("li",[t._v(".literal // (유니코드 자체로) 글자그대로")]),t._v(" "),s("li",[t._v(".numeric // 숫자 전체를 인식해서 비교")]),t._v(" "),s("li",[t._v(".anchored // (앞부분부터) 고정시키고 (접두어)")]),t._v(" "),s("li",[t._v(".backwards // 문자 뒷자리부터")]),t._v(" "),s("li",[t._v(".regularExpression // 정규식 검증 ⭐️")])])]),t._v(" "),s("li",[s("code",[t._v('str.contains("문자열")')]),t._v(" - 문자열이 str에 포함되어 있는지")]),t._v(" "),s("li",[s("code",[t._v('str.hasPrefix("문자열")')]),t._v(" - 접두어에 문자열이 포함되어 있는지")]),t._v(" "),s("li",[s("code",[t._v('str.hasSuffix("문자열")')]),t._v(" - 접미어에 문자열이 포함되어 있는지")]),t._v(" "),s("li",[s("code",[t._v("str.prefix(Number)")]),t._v(", "),s("code",[t._v("str.suffix(Number)")]),t._v(" - 첫글자로부터 ~글자, 마지막글자로부터 ~글자까지 얻어내기")]),t._v(" "),s("li",[s("code",[t._v('str.commonPrefix(with: "문자열")')]),t._v(", "),s("code",[t._v('str.commonSuffix(with: "문자열")')]),t._v(" - with 문자열과 공통된 접두어, 접미어 반환")]),t._v(" "),s("li",[s("code",[t._v("str.dropFirst(Number)")]),t._v(", "),s("code",[t._v("str.dropLast(Number)")]),t._v(" - 처음부터 ~글자, 마지막부터 ~글자를 지운 나머지 문자열 반환")]),t._v(" "),s("li",[s("code",[t._v('str.trimmingCharacters(in: ["문자열"])')]),t._v(" - in 아규먼트 배열에 전달된 문자열을 찾아 앞 뒤에서 지운다.\n"),s("ul",[s("li",[t._v("trimmingCharacters의 in 아규먼트에는 애플이 만들어 놓은 CharacterSet 열거형도 사용 가능하다. (자주 사용하는 것들 - "),s("code",[t._v(".whiteSpace")]),t._v(" 등)")])])]),t._v(" "),s("li",[s("code",[t._v('str.components(separatedBy: "문자열")')]),t._v(" - 전달된 문자열을 구분자로 하여 문자열을 자른 후 배열로 만든다.\n"),s("ul",[s("li",[s("code",[t._v("separatedBy")]),t._v("에 "),s("code",[t._v("CharacterSet")]),t._v("타입을 전달해도 된다.")]),t._v(" "),s("li",[t._v("배열도 전달 가능 (trimmingCharacters와 동일하게 "),s("code",[t._v('["!", "?"]')]),t._v(")")])])]),t._v(" "),s("li",[s("code",[t._v('str.split(separator: "문자열")')]),t._v(" - 전달된 문자열을 구분자로 하여 구분한다. components메서드와 유사하지만 메모리를 덜 쓴다. (서브스트링 타입으로 반환하기 때문)\n"),s("ul",[s("li",[t._v("split메서드 separator는 클로저 형태로도 구현 가능하다. 문자열 각 문자를 순회하며 해당 문자를 분기, 맞는 조건일 경우 구분자로 사용하는 방식")])])])]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 정규식 사용 예시")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rawString 형식으로 사용한다. 이스케이프 문자를 자주 사용하기 때문")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// range메서드의 of 아규먼트와 함께 주로 사용한다.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" telephoneNumRegex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('#"[0-9]{3}-[0-9]{4}-[0-9]{4}"#')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" telephoneNumRegex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("regularExpression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"유효한 전화번호로 판단"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("문자열 인덱싱")]),t._v(" "),s("p",[t._v("정수형 데이터를 저장할때는 일정한 간격으로 메모리 공간을 할당받기 때문에 정수형 인덱싱에 문제가 없지만, 문자열 데이터의 경우 각 문자가 갖는 메모리값이 다르기 때문에 정수형 인덱싱이 불가능하다.")]),t._v(" "),s("p",[t._v("문자열 자체적으로 갖는 인덱싱 속성들을 통해 접근해야 한다.")]),t._v(" "),s("p",[t._v("각종 인덱스 메서드들은 "),s("strong",[t._v("인덱스를 얻어내는 것이므로, 반환받은 후 서브스트링에 전달하면 된다.")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("부분 문자열 뽑아내기")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lower "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offsetBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" upper "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offsetBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngreeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lower"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("upper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 기억하기")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// split 클로저 사용 예시")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token short-argument"}},[t._v("$0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.inflearn.com/course/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%8A%A4%EC%BF%A8/dashboard",target:"_blank",rel:"noopener noreferrer"}},[t._v("인프런 - 앨런 swift 문법 마스터 스쿨"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);
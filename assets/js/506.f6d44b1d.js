(window.webpackJsonp=window.webpackJsonp||[]).push([[506],{1086:function(t,e,a){"use strict";a.r(e);var s=a(6),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" @State")]),t._v(" "),e("p",[t._v("모던 웹 프론트엔드 앱은 상태값 처리가 개발자에게 필요한 기본 소양이다. 선언형 UI 기반으로 동작하는 스위프트 UI의 경우에도 속성값에 대한 바인딩 로직을 직접 구현하기 보다 상태값에 대한 키워드 선언을 통해 속성과 UI 바인딩의 책임을 내부에 적절히 넘기게 된다.")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContentView")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@State")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("some")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("스위프트 UI에서의 뷰는 구조체 기반으로 동작한다. 구조체 인스턴스는 "),e("strong",[t._v("스택 프레임 내에서 관리된다.")])]),t._v(" "),e("p",[t._v("구조체 인스턴스에 대해 메서드를 통한 속성값 변경은 원칙적으로 불가능하다. "),e("code",[t._v("mutating")]),t._v(" 키워드를 통해 수정은 가능하지만 값 타입에 대한 일시적 복사일 뿐 함수 호출의 종료와 함께 스택프레임에 담긴 데이터는 모두 소멸된다.")]),t._v(" "),e("p",[e("code",[t._v("@State")]),t._v(" 키워드는 뷰가 소멸되는 시점까지 상태값을 메모리에서 관리하도록 해준다. 상태값 변화에 따라 스위프트 UI가 이를 인지하여 뷰를 리로드해준다.")]),t._v(" "),e("p",[e("code",[t._v("@State")]),t._v("키워드 기반의 속성은 현재 뷰 안에 제한해두어 사용하는 것이 중요하다. 다른 뷰에서 해당 속성값을 참조하지 못하도록 "),e("code",[t._v("private")]),t._v("으로 선언하는 것이 중요하다.")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("@State 키워드 속성은 값 타입만 선언하자")]),t._v(" "),e("blockquote",[e("p",[t._v("Use state as the single source of truth for a given value type that you store in a view hierarchy. (Apple Document)")])]),t._v(" "),e("blockquote",[e("p",[t._v("A State instance isn’t the value itself; it’s a means of reading and mutating the value. To access a state’s underlying value, use its value property.")])]),t._v(" "),e("p",[e("code",[t._v("@State")]),t._v(" 인스턴스는 값의 변화를 감지해야 하는데 참조 타입으로 선언된 속성은 상태값으로 관리하게 되면 의미가 없을 것이, 주소값 자체의 변화가 이루어지지 않는다는 것이다.")]),t._v(" "),e("p",[t._v("예컨대 참조 타입 변수를 상태값으로 관리하면 16진수 주소 "),e("code",[t._v("0x....")]),t._v(" 자체를 상태값으로 관리할텐데 참조하는 메모리 주소 객체의 값을 구조체에서 알 수 없다는 것이다.")]),t._v(" "),e("p",[t._v("따라서 "),e("code",[t._v("@State")]),t._v(" 키워드를 사용할 때에는 밸류 타입의 속성을 사용하는 것이 중요하다.")])]),t._v(" "),e("h2",{attrs:{id:"observedobject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#observedobject"}},[t._v("#")]),t._v(" @ObservedObject")]),t._v(" "),e("p",[e("code",[t._v("@State")]),t._v("가 하나의 뷰에 제한되어 관리되는 상태값이었다면 "),e("code",[t._v("@ObservedObject")]),t._v("는 여러 뷰에 걸쳐 사용되는 상태값이다. "),e("code",[t._v("@State")]),t._v(" 키워드로 선언된 속성 사이에 나타나는 주요한 차이점은 바로 메모리 관리의 주체가 개발자에게 있느냐 "),e("code",[t._v("SwiftUI")]),t._v("에게 넘기느냐이다. "),e("code",[t._v("@State")]),t._v("는 상태값에 대한 메모리 관리를 SwiftUI에게 넘겨준다.")]),t._v(" "),e("p",[t._v("스택프레임에서 소멸되지 않고 메모리 내에 영속적 관리를 위한 데이터는 클래스로 정의한다. 클래스는 반드시 "),e("code",[t._v("ObservableObject")]),t._v(" 프로토콜을 채택해야 하며 "),e("code",[t._v("@ObservedObject")]),t._v(" 키워드로 속성에 추가된다.")]),t._v(" "),e("p",[e("code",[t._v("@ObservedObject")]),t._v("도 동작 자체는 "),e("code",[t._v("@State")]),t._v("와 동일하다. 뷰를 리로드시킬 트리거 조건될 속성을 반드시 결정해줘야 하는데, 이때 사용하는 키워드가 바로 "),e("code",[t._v("@Published")]),t._v("이다.")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemoStore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObservableObject")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@Published")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" memoList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Memo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("위와 같이 메모 리스트를 코어데이터에서 관리한다고 가정하고 정의한 "),e("code",[t._v("DAO")]),t._v(" 클래스이다. 메모 객체에 대해 코어데이터로의 CRUD를 처리해준다.")]),t._v(" "),e("p",[t._v("이때 메모 데이터의 업데이트를 기준으로 UI를 업데이트해줘야 하므로 "),e("code",[t._v("memoList")]),t._v("라는 속성에 "),e("code",[t._v("@Published")]),t._v(" 키워드를 붙여주어 데이터 업데이트가 자연스럽게 UI에 대한 업데이트로 이어진다.")]),t._v(" "),e("p",[e("code",[t._v("@ObservedObject")]),t._v("의 "),e("code",[t._v("@Published")]),t._v(" 속성은 값 변화가 감지될 경우 그 즉시 이를 참조하는 모든 뷰에 알람이 전송된다.")]),t._v(" "),e("h2",{attrs:{id:"stateobject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stateobject"}},[t._v("#")]),t._v(" @StateObject")]),t._v(" "),e("p",[e("code",[t._v("@StateObject")]),t._v("는 "),e("code",[t._v("@ObservedObject")]),t._v("와 거의 유사하다. 클래스에 대해 "),e("code",[t._v("ObservableObject")]),t._v(" 프로토콜을 채택하여 구현하고, 뷰 리로드를 트리거할 속성에 "),e("code",[t._v("@Published")]),t._v(" 프로퍼티 래퍼를 등록하는 것까지 동일하다.")]),t._v(" "),e("p",[t._v("속성값 변경이 감지되면 "),e("code",[t._v("body")]),t._v("를 리프레시하는 것 역시 동일하다.")]),t._v(" "),e("p",[t._v("두 프로퍼티 래퍼의 주요한 차이점은 객체에 대한 소유권이다. "),e("code",[t._v("@StateObject")]),t._v("는 객체의 생성이 현재 뷰에서 이루어졌음을 나타내며 이에 따라 뷰에서 직접 뷰를 소유한다. 반면 "),e("code",[t._v("@ObservedObject")]),t._v("는 참조하는 객체가 다른 뷰에서 생성되었으므로 속성에 대한 관찰만 이루어지며 객체에 대한 직접적 소유는 하지 않는다.")]),t._v(" "),e("h2",{attrs:{id:"environmentobject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#environmentobject"}},[t._v("#")]),t._v(" @EnvironmentObject")]),t._v(" "),e("p",[e("code",[t._v("@EnvironmentObject")]),t._v(" 프로퍼티 래퍼로 선언된 속성은 어플리케이션 실행 환경 안에서 생성되는 모든 뷰에서 접근 가능하다. 앱 내의 뷰가 하나의 모델을 참조하는 형태를 띨때 모델 변화에 따라 뷰의 동기화가 한꺼번에 이루어져야 하는데, 이때 사용하는 프로퍼티 래퍼이다.")]),t._v(" "),e("h2",{attrs:{id:"environment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#environment"}},[t._v("#")]),t._v(" @Environment")]),t._v(" "),e("p",[e("code",[t._v("@Environment")]),t._v("와 "),e("code",[t._v("@EnvironmentObject")]),t._v("는 미묘하게 다른 부분이 존재한다. "),e("code",[t._v("@EnvironmentObject")]),t._v("는 앱 실행환경에서 접근 가능한 오브젝트를 정의하는 것이고 "),e("code",[t._v("@Environment")]),t._v("는 swiftUI에서 사전 정의된 키패스 오브젝트의 키로 접근할때 사용하게 된다.")]),t._v(" "),e("p",[t._v("예를 들어 실행 환경에서 시스템으로부터 얻어오고 싶은 설정값들이 있을때 쉽게 접근 가능하도록 스위프트UI에서 제공한다. 다크모드 상태값, 렌더링된 뷰 사이즈 등 여러가지가 존재한다.")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@Environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("colorScheme"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" colorScheme\n")])])]),e("p",[t._v("앱 실행환경 내에서 속성값을 추출하여 연결해준다는 방식 자체는 두 프로퍼티 래퍼가 동일하다.")]),t._v(" "),e("p",[t._v("다만 "),e("code",[t._v("@EnvironmentObject")]),t._v("의 경우 오브젝트의 타입을 기준으로 실행환경 내부를 살펴 속성값을 바인딩하기 때문에 문제가 없는 것이고 위의 다크모드 여부를 확인하는 컬러 스킴의 경우 그 타입이 "),e("code",[t._v("Bool")]),t._v("이기에 실행환경 모든 곳에서 통용되는 원시 타입을 속성값에 바인딩하는 것은 불가능하다.")]),t._v(" "),e("p",[t._v("따라서 정확한 swiftUI의 pre-defined 키값을 기준으로 속성값을 바인딩해야 한다.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("@MainActor")]),t._v(" "),e("p",[e("code",[t._v("@MainActor")]),t._v("는 백그라운드 스레드에서 처리된 작업을 메인 스레드로 옮겨 UI 업데이트를 할때 사용한다.")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@MainActor")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("process")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CLLocation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("guard")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isPreviewService "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Task")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentLocation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateAddress")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" location"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchWeather")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" location"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        updating "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("h2",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hacking with Swift - What’s the difference between @ObservedObject, @State, and @EnvironmentObject?"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://medium.com/geekculture/understanding-the-mutating-keyword-in-swift-71163418e2f6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Medium - Understanding the Mutating Keyword in Swift"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://stackoverflow.com/questions/56438730/what-does-the-swiftui-state-keyword-do",target:"_blank",rel:"noopener noreferrer"}},[t._v("What does the SwiftUI "),e("code",[t._v("@State")]),t._v(" keyword do?"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.apple.com/documentation/swiftui/state",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apple Document - State"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.hackingwithswift.com/quick-start/swiftui/what-is-the-environment-property-wrapper",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is the @Environment property wrapper?"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);